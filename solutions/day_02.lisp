(defun day02a ()
  (with-open-file (s "inputs/day_02.txt")
    (let ((input)
          (pos 0))
      (do ((l (read-line s) (read-line s nil 'eof)))
          ((eq l 'eof) "Reached end of file.")
       (setf input (mapcar (lambda (x) (parse-integer x)) (uiop:split-string l :separator ","))))
      (setf (nth (+ 1 pos) input) 12)
      (setf (nth (+ 2 pos) input) 2)
      
      (defun process-instructions ()
        (case (nth pos input)
          (1 (setf (nth (nth (+ 3 pos) input) input)
                   (+ (nth (nth (+ 1 pos) input) input) (nth (nth (+ 2 pos) input) input)))
           (setf pos (+ 4 pos)) (process-instructions))
          (2 (setf (nth (nth (+ 3 pos) input) input)
                   (* (nth (nth (+ 1 pos) input) input) (nth (nth (+ 2 pos) input) input)))
           (setf pos (+ 4 pos)) (process-instructions))
          (99 (car input))))

      (process-instructions))))
      
(asdf:load-system :alexandria)

(defun day02b ()
  (with-open-file (s "inputs/day_02.txt")
    (let ((input)
          (backup)
          (pos 0)
          (result)
          (answer))
      (do ((l (read-line s) (read-line s nil 'eof)))
          ((eq l 'eof) "Reached end of file.")
       (setf input (mapcar (lambda (x) (parse-integer x)) (uiop:split-string l :separator ","))))
     
      (setf backup (mapcar (lambda (j) j) input))

      (defun process-instructions ()
        (case (nth pos input)
          (1 (setf (nth (nth (+ 3 pos) input) input)
                   (+ (nth (nth (+ 1 pos) input) input) (nth (nth (+ 2 pos) input) input)))
           (setf pos (+ 4 pos)) (process-instructions))
          (2 (setf (nth (nth (+ 3 pos) input) input)
                   (* (nth (nth (+ 1 pos) input) input) (nth (nth (+ 2 pos) input) input)))
           (setf pos (+ 4 pos)) (process-instructions))
          (99 (car input))))
      
      (dolist (x (alexandria:iota 100 :start 0 :step 1))
        (dolist (y (alexandria:iota 100 :start 0 :step 1))

          (setf input (mapcar (lambda (j) j) backup))
          (setf pos 0)
          
          (setf (nth 1 input) x)
          (setf (nth 2 input) y)
          (setf result (process-instructions))
          (when (= result 19690720)
            (setf answer (+ (* 100 x) y)))))
            
       answer)))
